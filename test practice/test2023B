#include <limits.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

// Masks for question 2

#define C2MASK 128  // 254 ?
#define C1MASK 512
#define O1MASK 2048
#define O2MASK 4096

// Question 1.a

typedef struct BTNode {
  int data;
  struct BTNode *left;
  struct BTNode *right;
} BTNode, *pnode;

void add(pnode *root, int data) {
  if (*root == NULL) {
    *root = (pnode)malloc(sizeof(BTNode));
    (*root)->data = data;
    (*root)->left = NULL;
    (*root)->right = NULL;
  } else if (data < (*root)->data) {
    add(&(*root)->left, data);  // recursive call going to the left
    // add(root->left, data); // recursive call going to the left (alternative
    // way to write the above line
  } else {
    add(&(*root)->right, data);  // recursive call going to the right
    // add(root->right, data); // recursive call going to the right (alternative
    // way to write the above line
  }
}

// Question 1.b

int height(pnode roof) {
  //   if (root == NULL) {
  //     return 0;
  //   } else {
  //     int heightLeft = height(root->left);
  //     int heightRight = height(root->right);
  //     if (heightLeft > heightRight) {
  //       return heightLeft + 1;
  //     } else {
  //       return heightRight + 1;
  //     }
  //   }

  if (roof == NULL) {
    return 0;
  } else {
    int heightLeft = height(roof->left);
    int heightRight = height(roof->right);
    return (heightLeft > heightRight) ? heightLeft + 1 : heightRight + 1;
  }
}

struct status {
  space1 : 1;
  unsigned int c2 : 7;
  space2 : 1;
  unsigned int c1 : 1;
  space3 : 1;
  unsigned int o1 : 1;
  unsigned int o2 : 1;
  space4 : 1;
};

// Question 3
typedef struct item {
  int value;
  struct item *next;
} item, *pitem;

void multimerger(item *arr[], int size, item **pNewList) {
  int ind, min = INT_MAX;
  for (int i = 0; i < size; i++) {
    if (arr[i] && arr[i]->value < min) {
      // finding the min value of the stat of every list, and saving it's index
      min = arr[i]->value;
      ind = i;
    }
  }
  if (min == INT_MAX) {
    *pNewList = NULL;  // if the min value is the max int, then we are done
    return;
  }
  pNewList = arr[ind];        // setting the new list to the min value
  arr[ind] = arr[ind]->next;  // moving the pointer to the next value
  multimerger(arr, size, &(*pNewList->next));
}

int main() {
  // Question 2.a

  int status, c1, c2, o1, o2;

  c1 = (status & C1MASK) >> 9;  // dividing it by 2, nine times
  c2 = (status & C2MASK) >> 1;

  o1 = (status & O1MASK) >> 11;
  o2 = (status & O2MASK) >> 12;

  if (o1 && o2) {  // 11
    printf("%d\n", c1 + c2);
  } else if (o1 && !o2)  // 10
  {
    printf("%d\n", c2 - c1);
  } else if (!o1 && o2)  // 01
  {
    printf("%d\n", pow(c1, c2));
  } else if (!o1 && !o2)  // 00
  {
    printf("%d\n", pow(c2, c1));
  }

  struct status stat;
  if (stat.o1 && stat.o2) {  // 11
    printf("%d\n", stat.c1 + stat.c2);
  } else if (stat.o1 && !stat.o2)  // 10
  {
    printf("%d\n", stat.c2 - stat.c1);
  } else if (!stat.o1 && stat.o2)  // 01
  {
    printf("%d\n", pow(stat.c1, stat.c2));
  } else if (!stat.o1 && !stat.o2)  // 00
  {
    printf("%d\n", pow(stat.c2, stat.c1));
  }

  return 0;
}
